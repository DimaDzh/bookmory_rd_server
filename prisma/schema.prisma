// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String   @id @default(cuid())
  email       String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName   String?  @map("first_name") @db.VarChar(100)
  lastName    String?  @map("last_name") @db.VarChar(100)
  isActive    Boolean  @default(true) @map("is_active")
  role        UserRole @default(USER)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  userBooks UserBook[]

  @@map("users")
}

model Book {
  id            String  @id @default(cuid())
  title         String  @db.VarChar(255)
  author        String  @db.VarChar(255)
  isbn          String? @db.VarChar(13)
  description   String? @db.Text
  coverUrl      String? @map("cover_url") @db.Text
  totalPages    Int     @map("total_pages")
  googleBooksId String? @unique @map("google_books_id") @db.VarChar(50)
  language      String? @db.VarChar(10)
  publisher     String? @db.VarChar(255)
  publishedDate DateTime? @map("published_date")
  genres        String[] // Array of genres
  
  // Metadata from Google Books API (stored as JSON)
  metadata      Json?
  
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  userBooks UserBook[]

  @@map("books")
}

model UserBook {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  bookId      String        @map("book_id")
  status      ReadingStatus @default(WANT_TO_READ)
  currentPage Int           @default(0) @map("current_page")
  review      String?       @db.Text
  isFavorite  Boolean       @default(false) @map("is_favorite")
  
  // Reading timeline
  startedAt   DateTime?     @map("started_at")
  finishedAt  DateTime?     @map("finished_at")
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  book        Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, bookId])
  @@map("user_books")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ReadingStatus {
  WANT_TO_READ
  READING
  FINISHED
  PAUSED
  DNF // Did Not Finish
}
